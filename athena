#!/bin/bash
# This function tries to retrieve the current script directory.
# Case this script is a symlink, it will try to resolve it. If
# the script is a relative symlink it will resolve it relative
# to the symlink base directory.
# USAGE: athena.get_current_script_dir
# RETURN: string
function athena.get_current_script_dir()
{
	local src="${BASH_SOURCE[0]}"
	local dir

	# While $src is a symlink, resolve it
	while [ -h "$src" ]; do
	  dir="$( cd -P "$( dirname "$src" )" && pwd )"
	  src="$( readlink "$src" )"

	  # relative symlink
	  [[ $src != /* ]] && src="$dir/$src"
	done
	dir="$( cd -P "$( dirname "$src" )" && pwd )"
	echo "$dir"
}

source "$(athena.get_current_script_dir)/bootstrap/variables.sh"
source "$(athena.get_current_script_dir)/bootstrap/host.functions.sh"

if [ "$1" = "base" -o -n "$1" -a -d "$ATHENA_PLGS_DIR/$1" ]; then
	ATHENA_PLUGIN=$1
	shift
fi

# from this point on arguments must be handled using the athena.argument functions
athena.argument.set_arguments "$@"
shift $#

ATHENA_PLG_DIR=$ATHENA_PLGS_DIR/$ATHENA_PLUGIN
ATHENA_PLG_DOCKER_DIR=$ATHENA_PLG_DIR/docker
ATHENA_PLG_DOCKER_ENV_BUILD_FILE=$ATHENA_PLG_DOCKER_DIR/default.env
ATHENA_PLG_VERSION_FILE=$ATHENA_PLG_DIR/version.txt
ATHENA_VERSION_FILE=$ATHENA_PLGS_DIR/base/version.txt
ATHENA_BASE_IMAGE_VERSION=$(athena.fs.get_file_contents "$ATHENA_VERSION_FILE")
ATHENA_PLG_IMAGE_VERSION=$(athena.fs.get_file_contents "$ATHENA_PLG_VERSION_FILE")
######################################################
athena.os.set_exit_handler
athena.os._handle_os
athena.os._process_flags
athena.fs.dir_exists_or_fail "$ATHENA_PLG_DIR"
athena.fs.file_exists_or_fail "$ATHENA_PLG_VERSION_FILE"
######################################################
declare -a athena_args
athena.argument.get_arguments athena_args
athena.plugin._router \
	"$(athena.plugin.get_plugin)" \
	"$(athena.plugin.get_plg_bin_dir)" \
	"$(athena.plugin.get_plg_cmd_dir)" \
	"$(athena.plugin.get_plg_lib_dir)" \
	"$(athena.plugin.get_plg_hooks_dir)" \
	"${athena_args[@]}"


athena.os.exit $?
